openapi: 3.0.0
info:
  description: Swagger Demo, including swagger-codegen, swagger2markup and asciidoctor.
  version: v1.1.0
  title: Swagger Demo
  termsOfService: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: qct
    url: http://website.com
    email: testing@gmail.com
  license:
    name: Apache License
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://127.0.0.1:8080
  - url: https://127.0.0.1:8080
  
tags:
  - name: book-api
    description: Book Api
  - name: category-api
    description: Category Api
paths:
  /v1/book/getByCategoryId:
    get:
      tags:
        - book-api
      summary: get a book by category
      operationId: getBooksByCategoryUsingGET
      parameters:
        - name: id
          in: query
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - api_key: []
  /v1/book/update:
    post:
      tags:
        - book-api
      summary: update a book
      operationId: updateUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        description: id
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: boolean
        "201":
          description: Created
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - api_key: []
  "/v1/book/{id}":
    get:
      tags:
        - book-api
      summary: get a book by id
      operationId: getBookByIdUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Book"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
        - api_key: []
  /v1/category/:
    get:
      tags:
        - category-api
      summary: get all categories
      operationId: getAllUsingGET
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  "/v1/category/{id}":
    get:
      tags:
        - category-api
      summary: get a category by ID
      operationId: getUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Category"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Book:
      type: object
      properties:
        author:
          type: string
        categoryId:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        name:
          type: string
      title: Book
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      title: Category
